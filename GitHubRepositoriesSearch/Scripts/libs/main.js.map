{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/bookmarks/bookmarks.component.css","webpack:///./src/app/bookmarks/bookmarks.component.html","webpack:///./src/app/bookmarks/bookmarks.component.ts","webpack:///./src/app/gitrepos/gitrepos.component.css","webpack:///./src/app/gitrepos/gitrepos.component.html","webpack:///./src/app/gitrepos/gitrepos.component.ts","webpack:///./src/app/header/header.component.css","webpack:///./src/app/header/header.component.html","webpack:///./src/app/header/header.component.ts","webpack:///./src/app/isbooked.directive.ts","webpack:///./src/app/services/github.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { GitreposComponent } from './gitrepos/gitrepos.component';\nimport { BookmarksComponent } from './bookmarks/bookmarks.component';\n\nconst routes: Routes = [\n  { path: '', component: GitreposComponent }, // home\n  { path: 'bookmarks', component: BookmarksComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<app-header></app-header>\\n<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GitreposComponent } from './gitrepos/gitrepos.component';\nimport { HeaderComponent } from './header/header.component';\nimport { BookmarksComponent } from './bookmarks/bookmarks.component';\nimport { IsBookedDirective } from './isbooked.directive';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GitreposComponent,\n    HeaderComponent,\n    BookmarksComponent,\n    IsBookedDirective\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    FormsModule,\n    NgxPaginationModule // pagination\n  ],\n  providers: [\n    {\n      provide: APP_BASE_HREF, // needed for routing\n      useValue: '/'\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Jvb2ttYXJrcy9ib29rbWFya3MuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<!-- repositories gallery -->\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-6 col-md-3 gallery thumbnail\\\"\\n      *ngFor=\\\"let git of bookmarks| paginate: { itemsPerPage: 20, currentPage: p }\\\">\\n      <!-- image -->\\n      <div class=\\\"\\\">\\n        <a target=\\\"_blank\\\"\\n          href=\\\"{{git.avatar}}\\\">\\n          <img src=\\\"{{git.avatar}}\\\"\\n            alt=\\\"\\\">\\n        </a>\\n      </div>\\n\\n      <div class=\\\"caption\\\">\\n        <!-- repository name -->\\n        <h5><a href=\\\"{{git.repoUrl}}\\\"\\n            target=\\\"_blank\\\">{{git.name}}</a></h5>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<div class=\\\"paginate-container\\\"\\n  *ngIf=\\\"bookmarks && bookmarks.length > 0\\\">\\n  <pagination-controls (pageChange)=\\\"p=$event\\\"></pagination-controls>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Gitrepoinfo } from '../models/gitrepoinfo';\nimport { GithubService } from '../services/github.service';\n\n@Component({\n  selector: 'app-bookmarks',\n  templateUrl: './bookmarks.component.html',\n  styleUrls: ['./bookmarks.component.css']\n})\nexport class BookmarksComponent implements OnInit {\n  bookmarks: Gitrepoinfo[];\n\n  constructor(private githubserv: GithubService) { }\n\n  ngOnInit() {\n    // load bookmarks on init\n    this.loadGithubBookmarks();\n  }\n\n  public loadGithubBookmarks() {\n    this.githubserv.getBookedRepositories().subscribe((data) => {\n      this.bookmarks = data;\n    });\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2dpdHJlcG9zL2dpdHJlcG9zLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"wrapper\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-12 col-md-12\\\">\\n      <!-- <div class=\\\"container\\\"> -->\\n      <div class=\\\"col-sm-12 text-center\\\">\\n        <h2 class=\\\"text-success\\\">Search Github</h2>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-xs-8 col-xs-offset-2\\\">\\n          <div class=\\\"input-group\\\">\\n            <input type=\\\"text\\\"\\n              [(ngModel)]=\\\"searchTerm\\\"\\n              class=\\\"form-control\\\"\\n              placeholder=\\\"Search\\\"\\n              (keyup.enter)=\\\"loadGithubRepos(1)\\\">\\n            <div class=\\\"\\n                input-group-btn\\\">\\n              <button class=\\\"btn btn-default\\\"\\n                type=\\\"button\\\"\\n                (click)=\\\"loadGithubRepos(1)\\\">\\n                <i class=\\\"glyphicon glyphicon-search\\\"></i>\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <!-- </div> -->\\n    </div>\\n  </div>\\n</div>\\n\\n<!-- repositories gallery -->\\n<div class=\\\"gallery\\\"\\n  *ngIf=\\\"repositories\\\">\\n  <div class=\\\"col-sm-6 col-md-3 gallery thumbnail\\\"\\n    *ngFor=\\\"let git of repositories.items | paginate: { itemsPerPage: 20, currentPage: page, totalItems: 1000 }\\\">\\n    <!-- image -->\\n    <div class=\\\"\\\">\\n      <a target=\\\"_blank\\\"\\n        href=\\\"{{git.avatar}}\\\">\\n        <img src=\\\"{{git.avatar}}\\\"\\n          alt=\\\"\\\">\\n      </a>\\n    </div>\\n\\n    <div class=\\\"caption\\\">\\n      <!-- repository name -->\\n      <h5><a href=\\\"{{git.repoUrl}}\\\"\\n          target=\\\"_blank\\\">{{git.name}}</a></h5>\\n      <!-- bookmark button -->\\n      <p>\\n        <button type=\\\"button\\\"\\n          class=\\\"btn btn-default btn-sm pull-right\\\"\\n          (click)=\\\"saveBookMark(git)\\\">\\n          <span class=\\\"glyphicon glyphicon-bookmark\\\"></span> Bookmark\\n        </button>\\n      </p>\\n    </div>\\n  </div>\\n</div>\\n<!-- pagination -->\\n<div class=\\\"paginate-container\\\"\\n  *ngIf=\\\"repositories && repositories.items.length > 0\\\">\\n  <pagination-controls (pageChange)=\\\"p=$event; loadGithubRepos(p)\\\"></pagination-controls>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Observable } from \"rxjs\";\n\nimport { GithubService } from '../services/github.service';\nimport { Gitrepoinfo, Repositories } from '../models/gitrepoinfo';\n\n@Component({\n  selector: 'app-gitrepos',\n  templateUrl: './gitrepos.component.html',\n  styleUrls: ['./gitrepos.component.css']\n})\nexport class GitreposComponent implements OnInit {\n  // repositories: Observable<Repositories>;  \n  repositories: Repositories;\n  searchTerm: string = '';\n  page: number; // pagination current page\n\n  constructor(private githubserv: GithubService) { }\n\n  ngOnInit() {\n    let state = this.githubserv.getState();\n    if (state) {\n      this.searchTerm = state.searchTerm;\n      this.page = state.currentPage;\n      this.repositories = state.repositories;\n    } else {\n      this.page = 1;\n    }\n  }\n\n  // click event handler for search repository in github\n  public loadGithubRepos(page: number) {\n    this.page = page;\n\n    if (this.searchTerm != \"\") {\n      this.githubserv.getRepositoriesByName(this.searchTerm, page).subscribe((data) => {\n        this.repositories = data;\n      });\n\n      // this.repositories = this.githubserv.getRepositoriesByName(this.searchItem, page);\n    }\n  }\n\n  // save repository in MVC web api\n  saveBookMark(git: Gitrepoinfo) {\n    this.githubserv.bookRepository(git);\n  }\n}\n\n\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<nav class=\\\"navbar navbar-default\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <a routerLink=\\\"/\\\"\\n        class=\\\"navbar-brand\\\">GitHub Repositories Search</a>\\n      <button type=\\\"button\\\"\\n        class=\\\"navbar-toggle collapsed\\\"\\n        data-toggle=\\\"collapse\\\"\\n        data-target=\\\"#navbar-collapse-1\\\">\\n        <span class=\\\"sr-only\\\">Toggle navigation</span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n      </button>\\n    </div>\\n\\n    <div class=\\\"collapse navbar-collapse\\\"\\n      id=\\\"navbar-collapse-1\\\">\\n      <ul class=\\\"nav navbar-nav\\\">\\n        <li routerLinkActive=\\\"active\\\"\\n          [routerLinkActiveOptions]=\\\"{exact: true}\\\">\\n          <a routerLink=\\\"/\\\">Home</a>\\n        </li>\\n        <li routerLinkActive=\\\"active\\\"\\n          [routerLinkActiveOptions]=\\\"{exact: true}\\\">\\n          <a routerLink=\\\"/bookmarks\\\">Bookmarks</a>\\n        </li>\\n      </ul>\\n    </div>\\n  </div>\\n</nav>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Directive, Input } from '@angular/core';\n\n@Directive({\n  selector: '[IsBooked]',\n  exportAs: 'IsBooked'\n})\nexport class IsBookedDirective {\n  @Input() IsBooked: boolean;\n\n  constructor() {\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { map, tap, switchMap } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\n\nimport { Gitrepoinfo, Repositories } from '../models/gitrepoinfo';\n\nexport class State {\n  searchTerm: string;\n  currentPage: number;\n  repositories: Repositories;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GithubService {\n  state: State;\n  constructor(private httpClient: HttpClient) { }\n\n  // get repositories from GitHub using github api\n  // getRepositoriesByName(searchKeyWord: string, page: number): Observable<Gitrepoinfo[]> {\n  // return this.httpClient.get(`https://api.github.com/search/repositories?q=` + searchKeyWord).\n  //     pipe(map((item: any) => item.items.map(p => <Gitrepoinfo>\n  //       {\n  //         name: p.name,\n  //         repoUrl: p.html_url,\n  //         avatar: p.owner.avatar_url\n  //       })));\n  // }\n\n  getState(): State {\n    return this.state;\n  }\n\n  getRepositoriesByName(searchKeyWord: string, page: number): Observable<Repositories> {\n    return this.httpClient.get(`https://api.github.com/search/repositories?q=${searchKeyWord}+in:name&page=${page}&per_page=20`).\n      pipe(map((data: any) => <Repositories> {\n        total_count: data.total_count,\n        incomplete_results: data.incomplete_results,\n        items: data.items.map(p => <Gitrepoinfo>\n          {\n            name: p.name,\n            repoUrl: p.html_url,\n            avatar: p.owner.avatar_url\n          })\n      }), tap((repositories: Repositories) => {\n        this.state = new State();\n        this.state.searchTerm = searchKeyWord;\n        this.state.currentPage = page;\n        this.state.repositories = repositories;\n      }));\n  }\n\n  // get booked repositories from MVC web api\n  getBookedRepositories(): Observable<Gitrepoinfo[]> {\n    return this.httpClient.get<Gitrepoinfo[]>(`/api/Git/GetBookedRepositories`);\n  }\n\n  // save repository in MVC web api\n  bookRepository(git: Gitrepoinfo) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json;charset=utf-8'\n    });\n\n    this.httpClient.post<Gitrepoinfo>('/api/Git/BookRepository', git, { headers: headers }).subscribe();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}